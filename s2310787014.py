# -*- coding: utf-8 -*-
"""s2310787014

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ytitnvAsm7HqiUp2q4fvpM8rLL9OMeGu
"""

import matplotlib.pyplot as plt

# Constants
gravity = 9.8

# Function to get user input
def get_user_input():
    print("\nUSER INPUT")
    velocity = float(input("Enter the velocity of the vehicle (m/s): "))
    road_condition = input("Enter the road condition (dry or wet): ")
    road_type = input("Enter the road type (concrete or ice): ")
    print("\n----------")
    return velocity, road_condition, road_type

# Main simulation logic
def main():
    # Get user input
    velocity, road_condition, road_type = get_user_input()

    # Determine friction coefficient based on road conditions and type
    if road_condition == 'dry' and road_type == 'concrete':
        friction_coefficient = 0.5
    elif road_condition == 'wet' and road_type == 'concrete':
        friction_coefficient = 0.35
    elif road_condition == 'dry' and road_type == 'ice':
        friction_coefficient = 0.15
    elif road_condition == 'wet' and road_type == 'ice':
        friction_coefficient = 0.08
    else:
        # Invalid input, print message and exit
        print("\nInvalid road inputs. Please, try again.\n")
        print("----------")
        return

    # Print simulation output
    print("\nSIMULATION OUTPUT")
    braking_distance = (velocity ** 2) / (2 * friction_coefficient * gravity)
    print(f"The braking distance is: {braking_distance: .2f} meters.")

    # Initialize variables for simulation
    distance = 0
    time_step = 0.1
    distance_values = [0]
    time_values = [0]
    velocity_values = [velocity]

    # Perform the simulation until the velocity reaches zero
    while velocity > 0:
        velocity -= friction_coefficient * gravity * time_step
        distance += velocity * time_step

        # Store values for plotting
        time_values.append(time_values[-1] + time_step)
        velocity_values.append(velocity)
        distance_values.append(distance)

    # Calculate and print the braking time
    braking_time = float(time_values[-1])
    print(f"The braking time is: {braking_time: .2f} seconds.\n")
    print("----------")

    # Plotting the results using matplotlib
    plt.figure(figsize=(12, 4))
    plt.subplot(1, 2, 1)
    plt.plot(time_values, velocity_values, label='Velocity')
    plt.title('Velocity vs. Time')
    plt.xlabel('Time (seconds)')
    plt.ylabel('Velocity (m/s)')
    plt.legend()

    plt.subplot(1, 2, 2)
    plt.plot(time_values, distance_values, label='Distance', color='orange')
    plt.title('Distance vs. Time')
    plt.xlabel('Time (seconds)')
    plt.ylabel('Distance (meters)')
    plt.legend()
    plt.show()

# Entry point of the script
if __name__ == "__main__":
    main()